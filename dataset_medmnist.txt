# MedMNIST 3D Datasets Reference
# ================================
# Source: https://medmnist.com/
# 
# This file contains information about the 3D datasets available in MedMNIST
# for use in 3D Group Equivariant Convolutional Neural Network experiments.

## Overview
MedMNIST provides 6 pre-processed 3D datasets covering diverse biomedical imaging modalities.
All 3D datasets are standardized to 28x28x28 voxels for lightweight evaluation.

## 3D Dataset Details

### 1. OrganMNIST3D
- **Data Modality**: CT (Computed Tomography)
- **Task**: Multi-class classification (11 classes)
- **Number of Samples**: 1,394 (1,000 / 200 / 194)
- **Classes**: 11 abdominal organs
- **Source**: Liver Tumor Segmentation Benchmark (LiTS)
- **License**: CC BY 4.0
- **Use Case**: Abdominal organ segmentation and classification

### 2. NoduleMNIST3D
- **Data Modality**: CT (Computed Tomography)
- **Task**: Binary classification (2 classes)
- **Number of Samples**: 1,633 (1,150 / 200 / 283)
- **Classes**: Benign vs Malignant lung nodules
- **Source**: Lung Image Database Consortium (LIDC)
- **License**: CC BY 4.0
- **Use Case**: Lung nodule malignancy detection

### 3. FractureMNIST3D
- **Data Modality**: CT (Computed Tomography)
- **Task**: Multi-class classification (3 classes)
- **Number of Samples**: 1,370 (1,000 / 200 / 170)
- **Classes**: Normal, Fracture, Hardware
- **Source**: MURA dataset
- **License**: CC BY 4.0
- **Use Case**: Bone fracture detection and classification

### 4. AdrenalMNIST3D
- **Data Modality**: CT (Computed Tomography)
- **Task**: Binary classification (2 classes)
- **Number of Samples**: 1,294 (1,000 / 200 / 94)
- **Classes**: Normal vs Adrenal mass
- **Source**: Adrenal Tumor Segmentation Challenge
- **License**: CC BY 4.0
- **Use Case**: Adrenal gland abnormality detection

### 5. VesselMNIST3D
- **Data Modality**: MRA (Magnetic Resonance Angiography)
- **Task**: Binary classification (2 classes)
- **Number of Samples**: 1,359 (1,000 / 200 / 159)
- **Classes**: Normal vs Abnormal vessels
- **Source**: Brain Tumor Segmentation (BraTS)
- **License**: CC BY 4.0
- **Use Case**: Cerebral vessel abnormality detection

### 6. SynapseMNIST3D
- **Data Modality**: Electron Microscope
- **Task**: Binary classification (2 classes)
- **Number of Samples**: 1,320 (1,000 / 200 / 120)
- **Classes**: Synapse vs Non-synapse
- **Source**: Connectomics datasets
- **License**: CC BY 4.0
- **Use Case**: Synapse detection in neural tissue

## Dataset Properties Summary

### Common Characteristics
- **Format**: 3D tensors (28x28x28 voxels)
- **Data Type**: Grayscale intensity values
- **Normalization**: Pre-processed and standardized
- **Splits**: Train/Validation/Test provided
- **License**: Creative Commons Attribution 4.0 (CC BY 4.0)

### Size Variations
- **Standard**: 28x28x28 (current datasets)
- **Large**: 64x64x64 (MedMNIST+ extension)
- **Note**: Larger sizes available for foundation model development

## Loading Instructions

### Installation
```bash
pip install medmnist
```

### Basic Usage
```python
from medmnist import INFO, Evaluator
from medmnist.mymedmnist import MedMNIST3D

# Get dataset info
info = INFO['organmnist3d']  # or other dataset names
n_channels = info['n_channels']
n_classes = len(info['label'])

# Load dataset
data = MedMNIST3D(split='train', download=True)
```

### Dataset Names for Loading
- `organmnist3d`
- `nodulemnist3d`
- `fracturemnist3d`
- `adrenalmnist3d`
- `vesselmnist3d`
- `synapsemnist3d`

### Data Structure
```python
# Each dataset provides:
data.imgs          # 3D images: (N, 28, 28, 28)
data.labels        # Labels: (N, num_classes)
data.splits        # Split information

# Access individual sample
img = data.imgs[0]      # Shape: (28, 28, 28)
label = data.labels[0]  # Shape: (num_classes,)
```

## Experiment Design Considerations

### 1. Input Tensor Shapes
- **Standard**: (B, C, 28, 28, 28) where C=1 (grayscale)
- **Group Equivariant**: (B, C*|G|, 28, 28, 28) where |G| is group order
- **Batch Processing**: Consider memory constraints for 3D data

### 2. Group Symmetry Choices
- **Octahedral (O)**: 24 elements, suitable for cubic symmetry
- **Full Octahedral (O_h)**: 48 elements, includes reflections
- **Cyclic (C_n)**: For rotational symmetry around specific axes
- **Dihedral (D_n)**: For rotational + reflection symmetry

### 3. Subsampling Strategies
- **Spatial**: 28→14→7→3 (3 levels of downsampling)
- **Group**: O_h→O→C4 (progressive group reduction)
- **Anti-aliasing**: Essential for both spatial and group subsampling

### 4. Model Architecture
- **3D Convolutions**: Use 3D kernels (3x3x3, 5x5x5)
- **Pooling**: 3D max/mean pooling for spatial reduction
- **Group Equivariance**: Maintain through all layers

## Performance Benchmarks

### Current Best Results (ResNet-18 + 3D)
- **OrganMNIST3D**: 0.996 AUC, 0.827 ACC
- **NoduleMNIST3D**: 0.907 AUC, 0.721 ACC
- **FractureMNIST3D**: 0.863 AUC, 0.745 ACC
- **AdrenalMNIST3D**: 0.844 AUC, 0.802 ACC
- **VesselMNIST3D**: 0.712 AUC, 0.820 ACC
- **SynapseMNIST3D**: 0.508 AUC, 0.745 ACC

### Target Improvements with GCNNs
- **Equivariance**: Better generalization under 3D transformations
- **Efficiency**: Reduced parameter count through group structure
- **Robustness**: Invariant to specific orientations

## DataLoader Implementation Notes

### PyTorch DataLoader Setup
```python
import torch
from torch.utils.data import DataLoader, TensorDataset

# Convert to PyTorch tensors
images = torch.FloatTensor(data.imgs).unsqueeze(1)  # Add channel dimension
labels = torch.LongTensor(data.labels)

# Create dataset
dataset = TensorDataset(images, labels)

# Create dataloader
dataloader = DataLoader(
    dataset, 
    batch_size=8,  # Smaller batch size for 3D data
    shuffle=True,
    num_workers=2
)
```

### Memory Considerations
- **Batch Size**: Start with 4-8 for 3D data
- **GPU Memory**: 3D convolutions require significant memory
- **Data Augmentation**: 3D rotations, flips, scaling

### Preprocessing Pipeline
1. **Normalization**: Standardize intensity values
2. **Augmentation**: 3D geometric transformations
3. **Group Lifting**: Convert to group-equivariant format
4. **Batching**: Group samples efficiently

## Citation Requirements

When using MedMNIST datasets, cite:
```bibtex
@article{medmnistv2,
   title={MedMNIST v2-A large-scale lightweight benchmark for 2D and 3D biomedical image classification},
   author={Yang, Jiancheng and Shi, Rui and Wei, Donglai and Liu, Zequan and Zhao, Lin and Ke, Bilian and Pfister, Hanspeter and Ni, Bingbing},
   journal={Scientific Data},
   volume={10},
   number={1},
   pages={41},
   year={2023},
   publisher={Nature Publishing Group UK London}
}
```

## Next Steps for Implementation

1. **Choose Primary Dataset**: Start with OrganMNIST3D (largest, multi-class)
2. **Design DataLoader**: Implement efficient 3D data loading
3. **Configure GCNN**: Set up octahedral group structure
4. **Training Pipeline**: Implement 3D training loop
5. **Evaluation**: Compare against baseline ResNet-18 + 3D results

---
*Last Updated: Based on MedMNIST v2 (2023)*
*Source: https://medmnist.com/*
